enum TestCodeGeneration {
	typealias ABool = Bool
	
	typealias AData = Data
	
	typealias Function00 = ICPFunctionNoArgsNoResult
	
	typealias Function01 = ICPFunctionNoArgs<Bool>
	
	typealias Function02 = ICPFunctionNoArgs<CandidTuple2<Bool, String>>
	
	typealias Function03 = ICPFunctionNoArgs<CandidTuple3<Bool, String, Bool?>>
	
	typealias Function10 = ICPFunctionNoResult<Bool>
	
	typealias Function20 = ICPFunctionNoResult<CandidTuple2<Bool, String>>
	
	typealias Function30 = ICPFunctionNoResult<CandidTuple3<Bool, String, Bool?>>
	
	typealias RepeatedRecord = CandidTuple2<[Int8?], UInt8>
	
	typealias UnnamedType0 = CandidTuple2<[Int8?], UInt8>
	
	typealias VectorBool = [Bool]
	
	typealias VectorOptionalText = [String?]
	
	
	struct Record: Codable {
		let a: [BigInt?]
		let b: BigUInt
		let c: CandidTuple2<Bool, String>
	}
	
	class TestServiceDef {
		let canister: ICPPrincipal
		let client: ICPRequestClient
	
		init(canister: ICPPrincipal, client: ICPRequestClient) {
			self.canister = canister
			self.client = client
		}
	
		func foo(_ arg0: UInt8, sender: ICPSigningPrincipal? = nil) async throws -> Int8 {
			let caller = ICPFunction<UInt8, Int8>(canister, "foo", query: false)
			let response = try await caller.callMethod(arg0, client, sender: sender)
			return response
		}
	
		func ref(sender: ICPSigningPrincipal? = nil) async throws -> Bool {
			let caller = Function01(canister, "ref", query: false)
			let response = try await caller.callMethod(client, sender: sender)
			return response
		}
	
	}
	
	enum UnnamedVariant: Codable {
		case fall
		case winter
		case summer
		case spring
	
		enum CodingKeys: Int, CodingKey {
			case fall = 1135983739
			case winter = 1385738053
			case summer = 2706091375
			case spring = 3281376973
		}
	}
	
	enum Variant: Codable {
		case a
		case b(String)
		case c(String, BigInt)
		case d(one: Bool, two: Data, three: CandidTuple2<[Int8?], UInt8>)
	
		enum CodingKeys: Int, CodingKey {
			case a = 97
			case b = 98
			case c = 99
			case d = 100
		}
	}
	

	class TestService {
		let canister: ICPPrincipal
		let client: ICPRequestClient
	
		init(canister: ICPPrincipal, client: ICPRequestClient) {
			self.canister = canister
			self.client = client
		}
	
		func noArgsNoResults(sender: ICPSigningPrincipal? = nil) async throws {
			let caller = ICPFunctionNoArgsNoResult(canister, "noArgsNoResults", query: false)
			let _ = try await caller.callMethod(client, sender: sender)
		}
	
		func singleUnnamedArg(_ arg0: String, sender: ICPSigningPrincipal? = nil) async throws {
			let caller = ICPFunctionNoResult<String>(canister, "singleUnnamedArg", query: true)
			let _ = try await caller.callMethod(arg0, client, sender: sender)
		}
	
		func singleUnnamedArgRecordWithUnnamedFields(_ arg0: CandidTuple2<Bool, String>, sender: ICPSigningPrincipal? = nil) async throws {
			let caller = ICPFunctionNoResult<CandidTuple2<Bool, String>>(canister, "singleUnnamedArgRecordWithUnnamedFields", query: false)
			let _ = try await caller.callMethod(arg0, client, sender: sender)
		}
	
		func singleNamedArg(myString: String, sender: ICPSigningPrincipal? = nil) async throws {
			let caller = ICPFunctionNoResult<String>(canister, "singleNamedArg", query: true)
			let _ = try await caller.callMethod(myString, client, sender: sender)
		}
	
		func singleUnnamedResult(sender: ICPSigningPrincipal? = nil) async throws -> Bool? {
			let caller = ICPFunctionNoArgs<Bool?>(canister, "singleUnnamedResult", query: false)
			let response = try await caller.callMethod(client, sender: sender)
			return response
		}
	
		func singleNamedResult(sender: ICPSigningPrincipal? = nil) async throws -> String {
			let caller = ICPFunctionNoArgs<String>(canister, "singleNamedResult", query: true)
			let response = try await caller.callMethod(client, sender: sender)
			return response
		}
	
		func multipleUnnamedArgsAndResults(_ arg0: String, _ arg1: [BigUInt], sender: ICPSigningPrincipal? = nil) async throws -> (Bool?, [Data]) {
			let caller = ICPFunction<CandidTuple2<String, [BigUInt]>, CandidTuple2<Bool?, [Data]>>(canister, "multipleUnnamedArgsAndResults", query: false)
			let response = try await caller.callMethod(.init(arg0, arg1), client, sender: sender)
			return response.tuple
		}
	
		func multipleNamedArgsAndResults(name: String, ids: [BigUInt], sender: ICPSigningPrincipal? = nil) async throws -> (out1: Bool?, out2: [Data]) {
			let caller = ICPFunction<CandidTuple2<String, [BigUInt]>, CandidTuple2<Bool?, [Data]>>(canister, "multipleNamedArgsAndResults", query: false)
			let response = try await caller.callMethod(.init(name, ids), client, sender: sender)
			return response.tuple
		}
	
		func functionReference(sender: ICPSigningPrincipal? = nil) async throws -> Bool {
			let caller = Function01(canister, "functionReference", query: false)
			let response = try await caller.callMethod(client, sender: sender)
			return response
		}
	
	}

}
